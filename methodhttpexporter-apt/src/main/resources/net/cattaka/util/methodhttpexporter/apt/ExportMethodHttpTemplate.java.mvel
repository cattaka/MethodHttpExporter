package ${packageName};

import android.os.Handler;

public class ${className} extends net.cattaka.util.methodhttpexporter.util.HttpServer {
    ${className} me = this;
    ${origClassName} orig;
    static Handler sHandler = new Handler(android.os.Looper.getMainLooper());
    public ${className}(${origClassName} orig) {
        this.orig = orig;
$foreach{methodInfo:methodInfos}
        addAction(new IAction() {
            @Override
            public String[] getParamNames() {
                return new String[] {
$foreach{argInfo:methodInfo.argInfos}
                    "${argInfo.name}",$end{}
                };
            }
            @Override
            public String getActionName() {
                return "${methodInfo.methodName}";
            }
            @Override
            public ActionResult action(final String... params) {
                class RunnableImpl implements Runnable {
                    volatile ActionResult result;
                    @Override
                    public void run() {
                        synchronized (this) {
                            try {
                                result = new ActionResult(200, String.valueOf(me.orig.${methodInfo.methodName}(
$code{count=0}$foreach{argInfo:methodInfo.argInfos}
                                    $if{count>0}, $end{}${argInfo.converter}(params[${count++}])$end{}
                                            )));
                            } catch (NumberFormatException e) {
                                result = new ActionResult(500, e.getMessage());
                            }
                            ((Object)this).notify();
                        }
                    }
                }
                RunnableImpl runnable = new RunnableImpl();
                synchronized (runnable) {
                    sHandler.post(runnable);
                    try {
                        ((Object)runnable).wait();
                    } catch(InterruptedException e) {
                        // ignore
                    }
                }
                return runnable.result;
            }
        });
$end{}
    }
    
}